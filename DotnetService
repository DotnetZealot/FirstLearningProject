        private readonly Environments _machineEnv;
        public Environments MachineEnv { get { return _machineEnv; } }
        private static ILog _logger = LogManager.GetLogger(typeof(Environment));
        public static bool _haveShownFirstMessages = false;

        private static Env _instance;
        public static Env Instance
        {
            get
            {
                if (_instance == null)
                    _instance = new Env();
                return _instance;
            }
        }

        public Env()
        {
            _wcfServiceFolderOverride = ConfigurationManager.AppSettings["WCFServiceFolderOverride"];

            _wcfServiceBaseFolder = ConfigurationManager.AppSettings["WCFServiceBaseFolder"];
            if (string.IsNullOrEmpty(_wcfServiceBaseFolder))
            {
                // If not specified in the config file use the original default value
                _wcfServiceBaseFolder = @""; // DO NOT CHANGE THIS HARD CODED I/P address - the haswell boxes are
            }

            var configSetting = ConfigurationManager.AppSettings["Environment"];
            if (configSetting == null)
                throw new ApplicationException("The environment variable needs to be set - development or production");

            if (!_haveShownFirstMessages)
                _logger.DebugFormat("Found env {0}. overrides env var.", configSetting);
            if (Environments.TryParse(configSetting, out _machineEnv))
            {

                if (!_haveShownFirstMessages)
                    _logger.DebugFormat("Environment from configuration {0}.", _machineEnv);
            }
            else
            {
                _logger.WarnFormat("Environment being set through config, don't know setting ({0})", configSetting);
                throw new ApplicationException("The environment variable isn't correct - should be 'Development' or 'Production' and is in fact [" + configSetting + "]");
            }
            _haveShownFirstMessages = true;
        }

        private string _wcfServiceBaseFolder;

        /// <summary>
        /// The shared folder for the WCFServiceLocater. Specify in app.config i.e. 
        /// to override the default
        /// </summary>
        public string WCFServiceBaseFolder
        {
            get { return _wcfServiceBaseFolder; }
        }

        /// <summary>
        /// If alterative folder for WCFServiceLocater when WCFServiceBaseFolder is unreachable
        /// </summary>
        public string WCFServiceAlternativeBaseFolder
        {
            get { return @"c:\temp\"; }
            // Should we return System.IO.Path.GetTempPath(); or 
            // Environment.GetEnvironmentVariable("temp", EnvironmentVariableTarget.Machine);  ?
        }

        private string _wcfServiceFolderOverride;
        /// <summary>
        /// service.  e.g. put this in your app.config <add key="WCFServiceFolderOverride" value="steve.adams" />
        /// </summary>
        public string WCFServiceFolderOverride
        {
            get { return _wcfServiceFolderOverride; }
        }



        public override string ToString()
        {
            return _machineEnv.ToString();
        }

        public bool Development { get { return _machineEnv == Environments.Development; } }
        public bool Production { get { return _machineEnv == Environments.Production; } }

        /// <summary>
        /// Get prod or dev database connection string.
        /// </summary>
        /// <returns></returns>
        public string DBConnectionName(string dbid)
        {
            return dbid + (Development ? "Dev" : "Prod");
        }

        public string ConnectionString(string dbId)
        {
            return ConfigurationManager.ConnectionStrings[DBConnectionName(dbId)].ConnectionString;
        }

        private static DateTime _runDate;
        private static bool _runDateOverride = false;
        public static DateTime Today
        {
            get
            {
                if (_runDateOverride)
                    return _runDate;
                return DateTime.Today;
            }
            set
            {
                _runDate = value.Date;
                _runDateOverride = true;
            }
        }

        public static DateTime Now
        {
            get
            {
                if (_runDateOverride)
                    return _runDate;
                return DateTime.Now;
            }
            set
            {
                _runDate = value;
                _runDateOverride = true;
            }
        }
