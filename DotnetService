        public static IDictionary<string, string> GetQuotas(this NetTcpBinding netTcpBinding)
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();
            NetTcpBinding b = netTcpBinding;

            dict.Add(nameof(b.CloseTimeout), b.CloseTimeout.ToString());
            dict.Add(nameof(b.EnvelopeVersion), b.EnvelopeVersion.ToString());
            dict.Add(nameof(b.HostNameComparisonMode), b.HostNameComparisonMode.ToString());
            dict.Add(nameof(b.ListenBacklog), b.ListenBacklog.ToString());
            dict.Add(nameof(b.MaxBufferPoolSize), b.MaxBufferPoolSize.ToString());
            dict.Add(nameof(b.MaxBufferSize), b.MaxBufferSize.ToString());
            dict.Add(nameof(b.MaxConnections), b.MaxConnections.ToString());
            dict.Add(nameof(b.MaxReceivedMessageSize), b.MaxReceivedMessageSize.ToString());
            dict.Add(nameof(b.MessageVersion), b.MessageVersion.ToString());
            dict.Add(nameof(b.Name), b.Name.ToString());
            dict.Add(nameof(b.Namespace), b.Namespace.ToString());
            dict.Add(nameof(b.OpenTimeout), b.OpenTimeout.ToString());
            dict.Add(nameof(b.PortSharingEnabled), b.PortSharingEnabled.ToString());
            //dict.Add(nameof(b.ReaderQuotas), b.ReaderQuotas.ToString());  // this is for xml SOAP, ignore at the moment
            dict.Add(nameof(b.ReceiveTimeout), b.ReceiveTimeout.ToString());
            dict.Add("ReliableSession", "ReliableSession:");
            dict.Add("\t" + nameof(b.ReliableSession.Enabled), b.ReliableSession.Enabled.ToString());
            dict.Add("\t" + nameof(b.ReliableSession.InactivityTimeout), b.ReliableSession.InactivityTimeout.ToString());
            dict.Add("\t" + nameof(b.ReliableSession.Ordered), b.ReliableSession.Ordered.ToString());
            dict.Add(nameof(b.Scheme), b.Scheme.ToString());
            dict.Add(nameof(b.Security), b.Security.ToString());
            dict.Add(nameof(b.SendTimeout), b.SendTimeout.ToString());
            dict.Add(nameof(b.TransactionFlow), b.TransactionFlow.ToString());
            dict.Add(nameof(b.TransactionProtocol), b.TransactionProtocol.ToString());
            dict.Add(nameof(b.TransferMode), b.TransferMode.ToString());

            return dict;
        }

        public static IDictionary<string, string> GetQuotas(this TcpTransportBindingElement bindingElement)
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();
            TcpTransportBindingElement b = bindingElement;

            dict.Add(nameof(b.ChannelInitializationTimeout), b.ChannelInitializationTimeout.ToString());
            dict.Add(nameof(b.ConnectionBufferSize), b.ConnectionBufferSize.ToString());
            dict.Add("ConnectionPoolSettings", "ConnectionPoolSettings:");
            dict.Add("\t" + nameof(b.ConnectionPoolSettings.GroupName), b.ConnectionPoolSettings.GroupName.ToString());
            dict.Add("\t" + nameof(b.ConnectionPoolSettings.IdleTimeout), b.ConnectionPoolSettings.IdleTimeout.ToString());
            dict.Add("\t" + nameof(b.ConnectionPoolSettings.LeaseTimeout), b.ConnectionPoolSettings.LeaseTimeout.ToString());
            dict.Add("\t" + nameof(b.ConnectionPoolSettings.MaxOutboundConnectionsPerEndpoint), b.ConnectionPoolSettings.MaxOutboundConnectionsPerEndpoint.ToString());
            dict.Add(nameof(b.ExtendedProtectionPolicy), b.ExtendedProtectionPolicy.ToString());
            dict.Add(nameof(b.HostNameComparisonMode), b.HostNameComparisonMode.ToString());
            dict.Add(nameof(b.ListenBacklog), b.ListenBacklog.ToString());
            dict.Add(nameof(b.ManualAddressing), b.ManualAddressing.ToString());
            dict.Add(nameof(b.MaxBufferPoolSize), b.MaxBufferPoolSize.ToString());
            dict.Add(nameof(b.MaxBufferSize), b.MaxBufferSize.ToString());
            dict.Add(nameof(b.MaxOutputDelay), b.MaxOutputDelay.ToString());
            dict.Add(nameof(b.MaxPendingAccepts), b.MaxPendingAccepts.ToString());
            dict.Add(nameof(b.MaxPendingConnections), b.MaxPendingConnections.ToString());
            dict.Add(nameof(b.MaxReceivedMessageSize), b.MaxReceivedMessageSize.ToString());
            dict.Add(nameof(b.PortSharingEnabled), b.PortSharingEnabled.ToString());
            dict.Add(nameof(b.Scheme), b.Scheme.ToString());
            dict.Add(nameof(b.TeredoEnabled), b.TeredoEnabled.ToString());
            dict.Add(nameof(b.TransferMode), b.TransferMode.ToString());

            return dict;
        }
